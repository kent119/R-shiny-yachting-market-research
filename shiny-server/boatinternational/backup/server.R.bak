library(shiny)
library(ggvis)
source("cleaning.R")

library(maps)
library(mapproj)
source("helpers.R")
countries <- readRDS("data/counties.rds")

# Define server logic required to draw a histogram
shinyServer(function(input, output) {
  
  output$text1 <- renderText({
    paste("You have selected this",input$select1)
  })
  
  output$text_range <- renderText({
    paste("You have chosen a range that goes from ", input$slider_year[1], " to ", input$slider_year[2], " !")
  })
  
  output$map <- renderPlot({
    map_var <- switch(
      input$select1,
      "Percent White" = countries$white,
      "Percent Blank" = countries$black,
      "Percent Hispanic" = countries$hispanic,
      "Percent Asian" = countries$asian
    )
    map_color <- switch(
      input$select1,
      "Percent White" = "darkgreen",
      "Percent Blank" = "black",
      "Percent Hispanic" = "darkorange",
      "Percent Asian" = "darkviolet"
    )
    map_legend_title <- paste("Percentage of ", switch(
      input$select1,
      "Percent White" = "White",
      "Percent Blank" = "Black",
      "Percent Hispanic" = "Hispanic",
      "Percent Asian" = "Asian"
    ))
    map_min <- input$slider_year[1]
    map_max <- input$slider_year[2]
    
    percent_map(
      var = map_var,
      color = map_color,
      legend.title = map_legend_title,
      min = map_min,
      max = map_max
    )
  })
  
  ############################################
  # filter the yachts, return a dataframe
  yachts_filted <- reactive({
    # Due to dplyr issue #318, we need temp variables for input values
    selected_loa_min <- input$slider_loa[1]
    selected_loa_max <- input$slider_loa[2]
    selected_price_min <- input$slider_price[1] * 1e6
    selected_price_max <- input$slider_price[2] * 1e6
    selected_year_min <- input$slider_year[1]
    selected_year_max <- input$slider_year[2]
    # Apply filters
    selected_yachts <- yachts %>%
      filter(
        loa >= selected_loa_min,
        loa <= selected_loa_max,
        price >= selected_price_min,
        price >= selected_price_min,
        year >= selected_year_min,
        year >= selected_year_min,
      ) %>%
      arrange(loa)
     
    selected_yachts <- as.data.frame(selected_yachts)

    selected_yachts
  })

  # Function for generating tooltip text
  yacht_tooltip <- function(x) {
    if (is.null(x)) return(NULL)
    if (is.null(x$name)) return(NULL)

    # Pick out the movie with this ID
    all_yachts <- isolate(yachts_filted())
    the_yacht <- all_yachts[all_yachts$name == x$name, ]

    paste0("<b>", the_yacht$name, "</b><br>",
      the_yacht$text_loa, "<br>",
      the_yacht$text_price, "<br>",
      the_yacht$builder, " - ", the_yacht$text_year
    )
  }

  yacht_price <- reactive({
    # Lables for axes
    xvar_name <- "LOA (m)"
    yvar_name <- "Prince (million USD)"

    # Normally we could do something like props(x = ~BoxOffice, y = ~Reviews),
    # but since the inputs are strings, we need to do a little more work.
    #xvar <- prop("x", as.symbol(input$xvar))
    #yvar <- prop("y", as.symbol(input$yvar))
    xvar <- input$slider_loa
    yvar <- input$slider_price

    yachts_filted %>%
      ggvis(x = xvar, y = yvar) %>%
      layer_points(size := 50, size.hover := 200,
        fillOpacity := 0.2, fillOpacity.hover := 0.5,
        stroke = ~year, key := ~year) %>%
      add_tooltip(yacht_tooltip, "hover") %>%
      add_axis("x", title = xvar_name) %>%
      add_axis("y", title = yvar_name) %>%
      add_legend("stroke", title = "Year of Build", values = factor(~year) ) %>%
      scale_numeric("stroke", domain = c(0,100),
        range = c("red", "green")) %>%
      set_options(width = 500, height = 500)
  })
  yacht_price %>% bind_shiny("yacht_price")

})
